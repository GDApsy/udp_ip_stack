CONFIG PART = xc6vlx240tff1156-1;


########## ML605 Board ##########
NET "CLK_IN_P" LOC = J9 | IOSTANDARD = LVDS_25 | DIFF_TERM = "TRUE";
NET "CLK_IN_N" LOC = H9 | IOSTANDARD = LVDS_25 | DIFF_TERM = "TRUE";

############
# ETHERNET #
############
NET "phy_resetn" LOC = AH13 | IOSTANDARD = LVCMOS25 | TIG;

NET "gmii_rxd[7]" LOC = AC13 | IOSTANDARD = LVCMOS25;
NET "gmii_rxd[6]" LOC = AC12 | IOSTANDARD = LVCMOS25;
NET "gmii_rxd[5]" LOC = AD11 | IOSTANDARD = LVCMOS25;
NET "gmii_rxd[4]" LOC = AM12 | IOSTANDARD = LVCMOS25;
NET "gmii_rxd[3]" LOC = AN12 | IOSTANDARD = LVCMOS25;
NET "gmii_rxd[2]" LOC = AE14 | IOSTANDARD = LVCMOS25;
NET "gmii_rxd[1]" LOC = AF14 | IOSTANDARD = LVCMOS25;
NET "gmii_rxd[0]" LOC = AN13 | IOSTANDARD = LVCMOS25;

NET "gmii_txd[7]" LOC = AF11 | IOSTANDARD = LVCMOS25;
NET "gmii_txd[6]" LOC = AE11 | IOSTANDARD = LVCMOS25;
NET "gmii_txd[5]" LOC = AM10 | IOSTANDARD = LVCMOS25;
NET "gmii_txd[4]" LOC = AL10 | IOSTANDARD = LVCMOS25;
NET "gmii_txd[3]" LOC = AG11 | IOSTANDARD = LVCMOS25;
NET "gmii_txd[2]" LOC = AG10 | IOSTANDARD = LVCMOS25;
NET "gmii_txd[1]" LOC = AL11 | IOSTANDARD = LVCMOS25;
NET "gmii_txd[0]" LOC = AM11 | IOSTANDARD = LVCMOS25;

NET "gmii_col" LOC = AK13 |IOSTANDARD = LVCMOS25; #To be removed from the udp/ip stack, probably unuseful
NET "gmii_crs" LOC = AL13 | IOSTANDARD = LVCMOS25; #To be removed from the udp/ip stack, probably unuseful
NET "mii_tx_clk" LOC = AD12 | IOSTANDARD = LVCMOS25; #To be removed from the udp/ip stack, probably unuseful

NET "gmii_tx_en" LOC = AJ10 | IOSTANDARD = LVCMOS25;
NET "gmii_tx_er" LOC = AH10 | IOSTANDARD = LVCMOS25;
NET "gmii_tx_clk" LOC = AH12 | IOSTANDARD = LVCMOS25;

NET "gmii_rx_dv" LOC = AM13 | IOSTANDARD = LVCMOS25;
NET "gmii_rx_er" LOC = AG12 | IOSTANDARD = LVCMOS25;
# P20 - GCLK7
NET "gmii_rx_clk" LOC = AP11 | IOSTANDARD = LVCMOS25;

##### TIME CONSTRAINTS
NET "clk_in_p" TNM_NET = "clk_in_p";
TIMESPEC "TS_emac1_clk_in_p" = PERIOD "clk_in_p" 5.000 ns HIGH 50% INPUT_JITTER 50.0ps;

# Ethernet GTX_CLK high quality 125 MHz reference clock
NET "*mac_block?gtx_clk_bufg" TNM_NET = "ref_gtx_clk";
TIMEGRP "mac_clk_ref_gtx" = "ref_gtx_clk";
TIMESPEC "TS_mac_clk_ref_gtx" = PERIOD "mac_clk_ref_gtx" 8 ns HIGH 50 %;

# Ethernet GMII PHY-side receive clock
NET "*mac_block?gmii_rx_clk" TNM_NET = "phy_clk_rx";
TIMEGRP "mac_clk_phy_rx" = "phy_clk_rx";
TIMESPEC "TS_mac_clk_phy_rx" = PERIOD "mac_clk_phy_rx" 7.5 ns HIGH 50 %;

# define TIGs between unrelated clock domains
TIMESPEC "TS_clock_path_gtx2ref" = FROM "TS_UDP_block_mac_block_clock_generator_clkout0" TO "TS_UDP_block_mac_block_clock_generator_clkout2" TIG;

# define TIGs on reset synchronizer FDPE PRE inputs
PIN "*reset_sync1.PRE" TIG;
PIN "*reset_sync2.PRE" TIG;

##########################
# FIFO BLOCK CONSTRAINTS #
##########################

# AXI FIFO transmit-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?tx_fifo_i?rd_tran_frame_tog"    TNM = "tx_fifo_rd_to_wr";
#INST "*user_side_FIFO?tx_fifo_i?rd_retran_frame_tog"  TNM = "tx_fifo_rd_to_wr";
#INST "*user_side_FIFO?tx_fifo_i?rd_col_window_pipe_1" TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*"       TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?rd_txfer_tog"         TNM = "tx_fifo_rd_to_wr";
INST "*user_side_FIFO?tx_fifo_i?wr_frame_in_fifo"     TNM = "tx_fifo_wr_to_rd";

TIMESPEC "TS_tx_fifo_rd_to_wr" = FROM "tx_fifo_rd_to_wr" TO "mac_clk_ref_gtx" 8 ns DATAPATHONLY;
TIMESPEC "TS_tx_fifo_wr_to_rd" = FROM "tx_fifo_wr_to_rd" TO "mac_clk_ref_gtx" 8 ns DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*"          TNM = "tx_metastable";
#INST "*user_side_FIFO?tx_fifo_i?wr_col_window_pipe_0" TNM = "tx_metastable";
TIMESPEC "TS_tx_meta_protect" = FROM "tx_metastable" 5 ns DATAPATHONLY;

# Transmit-side AXI FIFO address bus timing
INST "*user_side_FIFO?tx_fifo_i?rd_addr_txfer*" TNM = "tx_addr_rd";
INST "*user_side_FIFO?tx_fifo_i?wr_rd_addr*"    TNM = "tx_addr_wr";
TIMESPEC "TS_tx_fifo_addr" = FROM "tx_addr_rd" TO "tx_addr_wr" 10 ns;

# AXI FIFO receive-side constraints
# -----------------------------------------------------------------------------

# Group the clock crossing signals into timing groups
INST "*user_side_FIFO?rx_fifo_i?wr_store_frame_tog" TNM = "rx_fifo_wr_to_rd";
INST "*user_side_FIFO?rx_fifo_i?rd_addr*"           TNM = "rx_fifo_rd_to_wr";

TIMESPEC "TS_rx_fifo_wr_to_rd" = FROM "rx_fifo_wr_to_rd" TO "mac_clk_ref_gtx" 8 ns DATAPATHONLY;
TIMESPEC "TS_rx_fifo_rd_to_wr" = FROM "rx_fifo_rd_to_wr" TO "mac_clk_phy_rx"  8 ns DATAPATHONLY;

###############################################################################
# PHYSICAL INTERFACE CONSTRAINTS                                              #
# The following constraints are necessary for proper operation, and are tuned #
# for this example design. They should be modified to suit your design.       #
###############################################################################

# GMII physical interface constraints
# -----------------------------------------------------------------------------

# Set the IDELAY values on the PHY inputs, tuned for this example design.
# These values should be modified to suit your design.
INST "*v6emac_block*gmii_interface*delay_gmii_rx_dv" IDELAY_VALUE = 23;
INST "*v6emac_block*gmii_interface*delay_gmii_rx_er" IDELAY_VALUE = 23;
INST "*v6emac_block*gmii_interface*delay_gmii_rxd"   IDELAY_VALUE = 23;

# Group all IDELAY-related blocks to use a single IDELAYCTRL
INST "*dlyctrl"                                      IODELAY_GROUP = gmii_idelay;
INST "*v6emac_block*gmii_interface*delay_gmii_rx_dv" IODELAY_GROUP = gmii_idelay;
INST "*v6emac_block*gmii_interface*delay_gmii_rx_er" IODELAY_GROUP = gmii_idelay;
INST "*v6emac_block*gmii_interface*delay_gmii_rxd"   IODELAY_GROUP = gmii_idelay;

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the GMII receive bus remains in alignment with the rising edge of
# GMII_RX_CLK, to within 2 ns setup time and 0 ns hold time.
INST "gmii_rxd<?>" TNM = "gmii_rx";
INST "gmii_rx_dv"  TNM = "gmii_rx";
INST "gmii_rx_er"  TNM = "gmii_rx";
TIMEGRP "gmii_rx" OFFSET = IN 2 ns VALID 2 ns BEFORE "gmii_rx_clk" RISING;

# Constrain the GMII physical interface flip-flops to IOBs
INST "*v6emac_block*gmii_interface*rxd_to_mac*"  IOB = true;
INST "*v6emac_block*gmii_interface*rx_dv_to_mac" IOB = true;
INST "*v6emac_block*gmii_interface*rx_er_to_mac" IOB = true;
INST "*v6emac_block*gmii_interface*gmii_txd_?"   IOB = true;
INST "*v6emac_block*gmii_interface*gmii_tx_en"   IOB = true;
INST "*v6emac_block*gmii_interface*gmii_tx_er"   IOB = true;